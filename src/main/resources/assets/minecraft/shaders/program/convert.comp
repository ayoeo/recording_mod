#version 430

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba8) uniform readonly image2D input_image;

layout(binding = 1) writeonly buffer Y { uint y_ch[]; };

layout(binding = 2) writeonly buffer U { uint u_ch[]; };

layout(binding = 3) writeonly buffer V { uint v_ch[]; };

uniform float use_yuv444;

vec3 color_at(uint x, uint y) {
  return imageLoad(input_image, ivec2(x, y)).rgb;
}

// Full range
ivec3 yuv_from_rgb(vec3 rgb) {
  float r = rgb.r * 255;
  float g = rgb.g * 255;
  float b = rgb.b * 255;
  float y = 0.299 * r + 0.587 * g + 0.114 * b;
  float u = -0.169 * r - 0.331 * g + 0.500 * b + 128;
  float v = 0.500 * r - 0.419 * g - 0.081 * b + 128;
  return ivec3(y, u, v);
}


// Limited range
//ivec3 yuv_from_rgb(vec3 rgb) {
//  uint r = uint(rgb.r * 255.0);
//  uint g = uint(rgb.g * 255.0);
//  uint b = uint(rgb.b * 255.0);
//  uint y = ((66 * r + 129 * g + 25 * b + 128) >> 8) + 16;
//  uint u = ((-38 * r - 74 * g + 112 * b + 128) >> 8) + 128;
//  uint v = ((112 * r - 94 * g - 18 * b + 128) >> 8) + 128;
//  return ivec3(y, u, v);
//}

uint pack_4(ivec4 bytes) {
  return bytes.x | (bytes.y << 8) | (bytes.z << 16) | (bytes.w << 24);
}

void main() {
  ivec2 size = imageSize(input_image);
  uint width = size.x / 4;

  uint x = gl_GlobalInvocationID.x;
  uint y = gl_GlobalInvocationID.y;

  if (x * 2 >= width || y >= size.y) {
    return;
  }

  uint inv_y = size.y - y;

  ivec3 p0 = yuv_from_rgb(color_at(x * 8 + 0, inv_y));
  ivec3 p1 = yuv_from_rgb(color_at(x * 8 + 1, inv_y));
  ivec3 p2 = yuv_from_rgb(color_at(x * 8 + 2, inv_y));
  ivec3 p3 = yuv_from_rgb(color_at(x * 8 + 3, inv_y));
  ivec3 p4 = yuv_from_rgb(color_at(x * 8 + 4, inv_y));
  ivec3 p5 = yuv_from_rgb(color_at(x * 8 + 5, inv_y));
  ivec3 p6 = yuv_from_rgb(color_at(x * 8 + 6, inv_y));
  ivec3 p7 = yuv_from_rgb(color_at(x * 8 + 7, inv_y));
  y_ch[x * 2 + y * width] = pack_4(ivec4(p0.x, p1.x, p2.x, p3.x));
  y_ch[x * 2 + 1 + y * width] = pack_4(ivec4(p4.x, p5.x, p6.x, p7.x));

//  if (use_yuv444 == 1) {
  u_ch[x * 2 + y * width] = pack_4(ivec4(p0.y, p1.y, p2.y, p3.y));
  u_ch[x * 2 + 1 + y * width] = pack_4(ivec4(p4.y, p5.y, p6.y, p7.y));

  v_ch[x * 2 + y * width] = pack_4(ivec4(p0.z, p1.z, p2.z, p3.z));
  v_ch[x * 2 + 1 + y * width] = pack_4(ivec4(p4.z, p5.z, p6.z, p7.z));
//  } else {
//    if (y % 2 == 0) {
//      u_ch[x + (y / 2) * (width / 2)] = pack_4(ivec4(p0.y, p2.y, p4.y, p6.y));
//      v_ch[x + (y / 2) * (width / 2)] = pack_4(ivec4(p0.z, p2.z, p4.z, p6.z));
//    }
//  }
}
